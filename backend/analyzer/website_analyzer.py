import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re
import joblib
import warnings
import time
from datetime import datetime
from tqdm import tqdm
from sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold
from sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sklearn.feature_selection import SelectKBest, chi2, f_classif, mutual_info_classif
from sklearn.decomposition import PCA, TruncatedSVD
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, f1_score, roc_auc_score, precision_recall_curve
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier, VotingClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from xgboost import XGBClassifier
from sklearn.ensemble import IsolationForest
from sklearn.neighbors import LocalOutlierFactor
from sklearn.pipeline import Pipeline
import nltk
from nltk.corpus import stopwords
from nltk.stem import SnowballStemmer
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler
import warnings
warnings.filterwarnings("ignore")

# Configuration des biblioth√®ques NLTK
try:
    nltk.data.find('tokenizers/punkt')
except LookupError:
    nltk.download('punkt')
try:
    nltk.data.find('corpora/stopwords')
except LookupError:
    nltk.download('stopwords')






import os
import numpy as np
import requests
from bs4 import BeautifulSoup
import socket
import ssl
import re
from datetime import datetime
import json
import warnings
import random  # Pour simuler des r√©sultats al√©atoires

# Ignorer les avertissements li√©s √† l'absence de v√©rification SSL pour les requ√™tes
warnings.filterwarnings('ignore', message='Unverified HTTPS request')

class WebsiteAnalyzer:
    def __init__(self):
        # Dans cette version de d√©monstration, nous utilisons des mod√®les simul√©s
        self.risk_model = self.DummyModel()
        self.anomaly_model = self.DummyAnomalyModel()
        self.scaler = self.DummyScaler()
    
    # Classes internes pour simuler les mod√®les de ML
    class DummyModel:
        def predict(self, X):
            # Simuler un niveau de risque (0=Faible, 1=Mod√©r√©, 2=Important, 3=Critique)
            return np.array([random.randint(0, 3)])
        
        def predict_proba(self, X):
            # Simuler des probabilit√©s pour chaque niveau
            probs = np.random.random(4)
            return np.array([probs / probs.sum()])
    
    class DummyScaler:
        def transform(self, X):
            # Ne fait rien, retourne simplement les donn√©es
            return X
    
    class DummyAnomalyModel:
        def decision_function(self, X):
            # Simuler un score d'anomalie entre -0.5 et 0.5
            return np.array([random.uniform(-0.5, 0.5)])
        
        def predict(self, X):
            # Simuler une d√©tection d'anomalie (1=normal, -1=anomalie)
            return np.array([random.choice([1, -1])])
    
    def extract_website_features(self, url):
        """Extrait les caract√©ristiques d'un site web pour l'analyse"""
        # Normalisation de l'URL
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url

        domain = url.split('/')[2] if '//' in url else url.split('/')[0]
        print(f"\nüåê Analyse du site web: {url}")

        # Caract√©ristiques par d√©faut (cas o√π l'analyse √©choue)
        features = {
            'has_windows': 0,
            'has_linux': 0,
            'has_macos': 0,
            'has_android': 0,
            'has_ios': 0,
            'has_wordpress': 0,
            'has_joomla': 0,
            'has_drupal': 0,
            'has_oracle': 0,
            'has_microsoft': 0,
            'has_adobe': 0,
            'has_plugin': 0,
            'has_server': 1,  # Par d√©faut, un site web a un serveur
            'has_web': 1,     # Par d√©faut, c'est un site web
            'has_mobile': 0,
            'has_iot': 0,
            'has_cloud': 0,
            'has_injection': 0,
            'has_xss': 0,
            'has_sql': 0,
            'has_authentication': 0,
            'has_authorization': 0,
            'has_privilege': 0,
            'has_code_execution': 0,
            'has_arbitrary_code': 0,
            'has_buffer': 0,
            'has_overflow': 0,
            'has_dos': 0,
            'has_csrf': 0,
            'has_path_traversal': 0,
            'has_file_inclusion': 0,
            'has_encryption': 0,
            'has_ssl': 0,
            'has_mitm': 0,
            'has_bypass': 0,
            'has_backdoor': 0,
            'has_zero_day': 0,
            'risk_level': 0,
            'impact_level': 0
        }

        detected_vulnerabilities = []
        security_recommendations = []

        try:
            # Pr√©paration de l'en-t√™te des requ√™tes
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }

            # V√©rification SSL
            print("   - V√©rification du certificat SSL...")
            try:
                context = ssl.create_default_context()
                with socket.create_connection((domain, 443), timeout=10) as sock:
                    with context.wrap_socket(sock, server_hostname=domain) as ssock:
                        cert = ssock.getpeercert()

                        # Le certificat existe
                        features['has_ssl'] = 1

                        # V√©rification de la date d'expiration
                        expiry_date = datetime.strptime(cert['notAfter'], '%b %d %H:%M:%S %Y %Z')
                        ssl_expiry = expiry_date < datetime.now()
                        if ssl_expiry:
                            detected_vulnerabilities.append({
                                'name': 'Certificat SSL expir√©',
                                'description': f"Le certificat SSL a expir√© le {expiry_date.strftime('%Y-%m-%d')}",
                                'severity': 'Important'
                            })
                            security_recommendations.append({
                                'title': 'Renouveler le certificat SSL',
                                'description': 'Contactez votre fournisseur de certificat ou utilisez Let\'s Encrypt pour renouveler votre certificat SSL.',
                                'priority': 'Haute'
                            })
                        print(f"      ‚úì Certificat SSL valide: {'Non' if ssl_expiry else 'Oui'}")
            except Exception as e:
                features['has_ssl'] = 0
                detected_vulnerabilities.append({
                    'name': 'Absence de SSL/TLS',
                    'description': 'Le site n\'utilise pas de connexion s√©curis√©e (HTTPS) ou le certificat n\'est pas accessible',
                    'severity': 'Critique'
                })
                security_recommendations.append({
                    'title': 'Mettre en place HTTPS',
                    'description': 'Installez un certificat SSL via Let\'s Encrypt ou un autre fournisseur.',
                    'priority': 'Critique'
                })
                print(f"      ‚ö†Ô∏è Pas de certificat SSL ou erreur: {e}")

            # R√©cup√©ration de la page
            print("   - R√©cup√©ration du contenu de la page...")
            response = requests.get(url, headers=headers, timeout=10, verify=False)
            soup = BeautifulSoup(response.content, 'html.parser')

            # Simulation de d√©tection de vuln√©rabilit√©s
            # Pour la d√©monstration, nous ajoutons quelques vuln√©rabilit√©s al√©atoires
            vuln_types = [
                ('has_xss', 'Vuln√©rabilit√© XSS potentielle', 'Scripts externes suspects d√©tect√©s'),
                ('has_authentication', 'Formulaire d\'identification non s√©curis√©', 'Le formulaire d\'authentification pourrait √™tre vuln√©rable'),
                ('has_sql', 'Injection SQL potentielle', 'Param√®tres URL non sanitis√©s d√©tect√©s'),
                ('has_csrf', 'Protection CSRF manquante', 'Manque de jetons CSRF sur les formulaires'),
                ('has_path_traversal', 'Travers√©e de chemin possible', 'Protection insuffisante contre les attaques de travers√©e de chemin')
            ]
            
            # Simuler al√©atoirement 1 √† 3 vuln√©rabilit√©s
            num_vulnerabilities = random.randint(1, 3)
            selected_vulnerabilities = random.sample(vuln_types, num_vulnerabilities)
            
            severities = ['Faible', 'Mod√©r√©', 'Important', 'Critique']
            priorities = ['Basse', 'Moyenne', 'Haute', 'Critique']
            
            for vuln_type, name, desc in selected_vulnerabilities:
                features[vuln_type] = 1
                severity = random.choice(severities)
                priority = random.choice(priorities)
                
                detected_vulnerabilities.append({
                    'name': name,
                    'description': desc,
                    'severity': severity
                })
                
                security_recommendations.append({
                    'title': f'Corriger {name.lower()}',
                    'description': f'Mettre en place des mesures pour prot√©ger contre {name.lower()}',
                    'priority': priority
                })

        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de l'analyse du site: {e}")
            # En cas d'erreur, ajouter une vuln√©rabilit√© g√©n√©rique
            detected_vulnerabilities.append({
                'name': 'Erreur lors de l\'analyse',
                'description': f'Impossible d\'analyser correctement le site: {str(e)}',
                'severity': 'Inconnu'
            })
            security_recommendations.append({
                'title': 'V√©rifier l\'accessibilit√© du site',
                'description': 'Assurez-vous que le site est accessible et r√©pond correctement aux requ√™tes HTTP.',
                'priority': 'Haute'
            })

        return features, detected_vulnerabilities, security_recommendations

    def analyze_website(self, url):
        """Analyse compl√®te d'un site web et pr√©diction des risques"""
        try:
            # Extraction des caract√©ristiques
            features, detected_vulnerabilities, security_recommendations = self.extract_website_features(url)

            # Conversion des caract√©ristiques en format attendu par le mod√®le
            X = np.array([[features[key] for key in features]])

            print(f"Nombre de caract√©ristiques extraites : {X.shape[1]}")  # D√©bogage

            # Normalisation
            X_scaled = self.scaler.transform(X)

            # Pr√©diction du niveau de risque
            print("\nüîÆ Pr√©diction des risques de s√©curit√©...")
            risk_level = self.risk_model.predict(X_scaled)[0]

            # Probabilit√©s pour chaque classe
            risk_proba = self.risk_model.predict_proba(X_scaled)[0]

            # D√©tection d'anomalies
            anomaly_score = self.anomaly_model.decision_function(X_scaled)[0]
            is_anomaly = self.anomaly_model.predict(X_scaled)[0] == -1

            # Mappage du niveau de risque num√©rique au texte
            risk_level_map = {
                0: 'Faible',
                1: 'Mod√©r√©',
                2: 'Important',
                3: 'Critique'
            }

            # Calcul du score global (0-100, o√π 100 = risque √©lev√©)
            risk_score_pct = int(((risk_level / 3) * 60) +
                             (len(detected_vulnerabilities) * 3) +
                             (20 if is_anomaly else 0))

            # Plafonnement √† 100
            risk_score_pct = min(100, risk_score_pct)

            # R√©sultat
            result = {
                'url': url,
                'scan_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'risk_level_numeric': int(risk_level),
                'risk_level_text': risk_level_map.get(int(risk_level), 'Inconnu'),
                'risk_score': risk_score_pct,
                'is_anomaly': bool(is_anomaly),
                'anomaly_score': float(anomaly_score),
                'vulnerability_count': len(detected_vulnerabilities),
                'vulnerabilities': detected_vulnerabilities,
                'recommendations': security_recommendations,
                'probability': {
                    'Faible': float(risk_proba[0]) if len(risk_proba) > 0 else 0,
                    'Mod√©r√©': float(risk_proba[1]) if len(risk_proba) > 1 else 0,
                    'Important': float(risk_proba[2]) if len(risk_proba) > 2 else 0,
                    'Critique': float(risk_proba[3]) if len(risk_proba) > 3 else 0
                }
            }

            # Affichage du r√©sultat
            print(f"\nüìä R√©sultats de l'analyse:")
            print(f"   ‚úì URL: {result['url']}")
            print(f"   ‚úì Niveau de risque: {result['risk_level_text']} ({result['risk_score']}%)")
            print(f"   ‚úì Anomalie d√©tect√©e: {'Oui' if result['is_anomaly'] else 'Non'}")
            print(f"   ‚úì Nombre de vuln√©rabilit√©s: {result['vulnerability_count']}")
            print("   ‚úì Probabilit√©s par niveau de risque:")
            for level, prob in result['probability'].items():
                print(f"      - {level}: {prob:.2f}")

            return result

        except Exception as e:
            return {
                'error': f'Erreur lors de l\'analyse: {str(e)}',
                'url': url,
                'scan_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }

def generate_security_report(result, output_format='json'):
    """
    G√©n√®re un rapport de s√©curit√© au format JSON ou HTML
    
    Args:
        result: Dictionnaire contenant les r√©sultats de l'analyse
        output_format: Format du rapport ('json' ou 'html')
        
    Returns:
        str: Nom du fichier de rapport g√©n√©r√©
    """
    # V√©rification que le r√©sultat est valide
    if not result or 'error' in result:
        error_message = result.get('error', 'Erreur inconnue') if result else 'R√©sultat vide'
        print(f"\n‚ö†Ô∏è Impossible de g√©n√©rer le rapport complet: {error_message}")
        
        # Cr√©er un rapport d'erreur minimal
        result = {
            'url': result.get('url', 'URL inconnue') if result else 'URL inconnue',
            'scan_date': result.get('scan_date', datetime.now().strftime("%Y-%m-%d %H:%M:%S")) if result else datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'error': error_message,
            'risk_level_text': 'Inconnu',
            'risk_score': 0,
            'vulnerability_count': 0,
            'vulnerabilities': [],
            'recommendations': []
        }
    
    # S'assurer que toutes les cl√©s n√©cessaires existent
    required_keys = ['url', 'scan_date', 'risk_level_text', 'risk_score', 'vulnerability_count', 
                   'vulnerabilities', 'recommendations']
    
    for key in required_keys:
        if key not in result:
            result[key] = 'Non disponible' if key in ['url', 'scan_date', 'risk_level_text'] else 0 if key in ['risk_score', 'vulnerability_count'] else []
    
    # Cr√©ation du r√©pertoire reports s'il n'existe pas
    os.makedirs('reports', exist_ok=True)
    
    # Cr√©ation du nom de fichier en fonction de l'URL
    domain = result['url'].replace('https://', '').replace('http://', '').split('/')[0]
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    print(f"\nüìù G√©n√©ration du rapport de s√©curit√©...")
    
    if output_format.lower() == 'json':
        # G√©n√©ration du rapport JSON
        filename = f"reports/rapport_securite_{domain}_{timestamp}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=4)
            
    elif output_format.lower() == 'html':
        # G√©n√©ration du rapport HTML avec un style moderne
        filename = f"reports/rapport_securite_{domain}_{timestamp}.html"
        
        # Pr√©paration des sections HTML pour les vuln√©rabilit√©s
        vulns_html = ""
        if result['vulnerabilities']:
            for vuln in result['vulnerabilities']:
                severity = vuln.get('severity', 'Mod√©r√©')
                description = vuln.get('description', 'Aucune description disponible')
                vulns_html += f"""
                <div class="vuln-item">
                    <h4>{vuln['name']} <span class="severity severity-{severity}">{severity}</span></h4>
                    <p>{description}</p>
                </div>
                """
        else:
            vulns_html = "<p>Aucune vuln√©rabilit√© d√©tect√©e.</p>"

        # Pr√©paration des sections HTML pour les recommandations
        recs_html = ""
        if result['recommendations']:
            for rec in result['recommendations']:
                priority = rec.get('priority', 'Moyenne')
                description = rec.get('description', 'Aucune description disponible')
                recs_html += f"""
                <div class="rec-item">
                    <h4>{rec['title']}</h4>
                    <p><span class="priority priority-{priority}">Priorit√©: {priority}</span></p>
                    <p>{description}</p>
                </div>
                """
        else:
            recs_html = "<p>Aucune recommandation disponible.</p>"
        
        # D√©terminer la classe CSS pour le niveau de risque
        risk_class = 'risk-low'
        if result['risk_level_text'] == 'Critique':
            risk_class = 'risk-critical'
        elif result['risk_level_text'] == 'Important':
            risk_class = 'risk-important'
        elif result['risk_level_text'] == 'Mod√©r√©':
            risk_class = 'risk-moderate'
        
        html_content = f"""<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rapport de s√©curit√© - {result['url']}</title>
    <style>
        :root {{
            --color-bg: #f5f8fa;
            --color-text: #333;
            --color-primary: #2563eb;
            --color-secondary: #4b5563;
            --color-accent: #60a5fa;
            --color-success: #10b981;
            --color-warning: #f59e0b;
            --color-danger: #ef4444;
            --color-info: #3b82f6;
            --color-light: #f3f4f6;
            --color-dark: #1f2937;
            --color-white: #ffffff;
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --rounded: 0.375rem;
        }}
        
        body {{
            font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
            line-height: 1.6;
            color: var(--color-text);
            background-color: var(--color-bg);
            margin: 0;
            padding: 0;
        }}
        
        .container {{
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }}
        
        header {{
            background-color: var(--color-primary);
            color: var(--color-white);
            padding: 2rem 0;
            margin-bottom: 2rem;
            box-shadow: var(--shadow);
        }}
        
        header .container {{
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 0;
            margin-bottom: 0;
        }}
        
        h1, h2, h3, h4 {{
            color: var(--color-dark);
            margin-top: 1.5rem;
            margin-bottom: 1rem;
        }}
        
        header h1 {{
            color: var(--color-white);
            margin: 0;
            font-size: 1.8rem;
        }}
        
        .card {{
            background-color: var(--color-white);
            border-radius: var(--rounded);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: var(--shadow);
        }}
        
        .summary {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }}
        
        .summary-item {{
            padding: 1rem;
            border-radius: var(--rounded);
            background-color: var(--color-white);
            box-shadow: var(--shadow-sm);
            text-align: center;
        }}
        
        .summary-item h3 {{
            margin-top: 0;
            color: var(--color-secondary);
            font-size: 1rem;
        }}
        
        .summary-item p {{
            font-size: 1.5rem;
            font-weight: bold;
            margin: 0.5rem 0;
        }}
        
        .vuln-item, .rec-item {{
            border-left: 4px solid var(--color-secondary);
            margin-bottom: 1rem;
            padding: 1rem;
            background-color: var(--color-light);
            border-radius: 0 var(--rounded) var(--rounded) 0;
        }}
        
        .vuln-item h4, .rec-item h4 {{
            margin-top: 0;
            margin-bottom: 0.5rem;
        }}
        
        .severity {{
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 2rem;
            font-size: 0.75rem;
            font-weight: bold;
            margin-left: 0.5rem;
            color: var(--color-white);
        }}
        
        .severity-Critique {{
            background-color: var(--color-danger);
        }}
        
        .severity-Important {{
            background-color: var(--color-warning);
        }}
        
        .severity-Mod√©r√© {{
            background-color: var(--color-info);
        }}
        
        .severity-Faible {{
            background-color: var(--color-success);
        }}
        
        .risk-score {{
            font-size: 1.2rem;
            font-weight: bold;
            color: var(--color-white);
            padding: 0.5rem 1rem;
            border-radius: var(--rounded);
            display: inline-block;
        }}
        
        .risk-low {{
            background-color: var(--color-success);
        }}
        
        .risk-moderate {{
            background-color: var(--color-info);
        }}
        
        .risk-important {{
            background-color: var(--color-warning);
        }}
        
        .risk-critical {{
            background-color: var(--color-danger);
        }}
        
        .priority {{
            font-weight: bold;
        }}
        
        .priority-Critique, .priority-Haute {{
            color: var(--color-danger);
        }}
        
        .priority-Moyenne {{
            color: var(--color-warning);
        }}
        
        .priority-Basse {{
            color: var(--color-info);
        }}
        
        footer {{
            text-align: center;
            margin-top: 2rem;
            padding: 1rem 0;
            color: var(--color-secondary);
            font-size: 0.875rem;
        }}
        
        @media (max-width: 768px) {{
            .summary {{
                grid-template-columns: 1fr;
            }}
        }}
    </style>
</head>
<body>
    <header>
        <div class="container">
            <h1>Rapport de s√©curit√© web</h1>
            <p>{result['scan_date']}</p>
        </div>
    </header>
    
    <div class="container">
        <div class="card">
            <h2>Informations g√©n√©rales</h2>
            <p><strong>URL analys√©e:</strong> {result['url']}</p>
            <p><strong>Date d'analyse:</strong> {result['scan_date']}</p>
            <p>
                <strong>Niveau de risque:</strong> 
                <span class="risk-score {risk_class}">
                    {result['risk_level_text']} ({result['risk_score']}%)
                </span>
            </p>
        </div>
        
        <div class="summary">
            <div class="summary-item">
                <h3>Niveau de risque</h3>
                <p>{result['risk_level_text']}</p>
            </div>
            <div class="summary-item">
                <h3>Score de risque</h3>
                <p>{result['risk_score']}%</p>
            </div>
            <div class="summary-item">
                <h3>Vuln√©rabilit√©s d√©tect√©es</h3>
                <p>{result['vulnerability_count']}</p>
            </div>
        </div>
        
        <div class="card">
            <h2>Vuln√©rabilit√©s d√©tect√©es</h2>
            {vulns_html}
        </div>
        
        <div class="card">
            <h2>Recommandations de s√©curit√©</h2>
            {recs_html}
        </div>
    </div>
    
    <footer>
        <div class="container">
            <p>Rapport g√©n√©r√© automatiquement le {result['scan_date']}</p>
            <p>¬© {datetime.now().year} Syst√®me d'analyse de vuln√©rabilit√©s web</p>
        </div>
    </footer>
</body>
</html>
"""
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(html_content)
            
    else:
        print(f"\n‚ö†Ô∏è Format de rapport non support√©: {output_format}")
        return None
        
    print(f"\n‚úÖ Rapport g√©n√©r√© avec succ√®s: {filename}")
    return filename




def evaluate_website(url):
    """Fonction qui appelle l'analyseur de site web"""
    try:
        # Cr√©ation de l'objet analyseur
        analyzer = WebsiteAnalyzer()
        
        # Analyse du site web
        result = analyzer.analyze_website(url)
        
        return result
    except Exception as e:
        return {
            'error': f'Erreur lors de l\'√©valuation: {str(e)}',
            'url': url,
            'scan_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }

def main():
    """Fonction principale du programme"""
    print("\n" + "="*80)
    print("üöÄ D√âMARRAGE DU SYST√àME DE PR√âDICTION DE VULN√âRABILIT√âS WEB")
    print("="*80)

    # Mode d'ex√©cution (entra√Ænement ou analyse)
    mode = input("\nMode d'ex√©cution :\n1. Entra√Ænement des mod√®les\n2. Analyse d'un site web\nChoix (1/2): ").strip()

    if mode == '1':
        # Mode entra√Ænement (simul√© pour cet exemple)
        print("\nüîÑ Mode: Entra√Ænement des mod√®les")
        print("\n‚ùó La fonctionnalit√© d'entra√Ænement est d√©sactiv√©e dans cette version de d√©monstration.")
        
    elif mode == '2':
        # Mode analyse
        print("\nüîç Mode: Analyse d'un site web")

        # Demande de l'URL √† analyser
        url = input("\nEntrez l'URL du site √† analyser: ").strip()

        # Analyse du site
        result = evaluate_website(url)

        # G√©n√©ration du rapport
        report_format = input("\nFormat du rapport (json/html): ").strip().lower()
        if report_format not in ['json', 'html']:
            report_format = 'json'

        report_file = generate_security_report(result, report_format)

    else:
        print("\n‚ö†Ô∏è Mode non reconnu. Fin du programme.")

    print("\n‚úÖ Programme termin√© avec succ√®s!")

# Si ce fichier est ex√©cut√© directement
if __name__ == "__main__":
    main()